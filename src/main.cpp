/*
 * RFID Matrix 8√ó12 Scanner - –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø v3.1 (–ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú)
 * ESP32 + PN532 (I2C) + 2x HP4067 –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä—ã
 * 
 * –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø v3.1:
 * - ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PN532
 * - ‚úÖ StateManager –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
 * - ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * - ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 * - ‚úÖ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–∏–Ω–≥–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
 */

#include <Arduino.h>
#include <Wire.h>
#include "config.h"
#include "state_manager.h"
#include "rfid_manager.h"
#include "multiplexer.h"
#include "scan_matrix.h"
#include "display_manager.h"

// =============================================
// RFID MATRIX 8√ó12 - –û–°–ù–û–í–ù–û–ô –§–ê–ô–õ v3.1
// =============================================

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
StateManager stateManager;
RFIDManager rfidManager;
MultiplexerManager muxManager;
ScanMatrix scanMatrix(&muxManager, &rfidManager);
DisplayManager displayManager(&stateManager, &rfidManager, &scanMatrix, &muxManager);

// –°—á–µ—Ç—á–∏–∫–∏ –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
int pn532InitAttempts = 0;
const int MAX_INIT_ATTEMPTS = 5;
unsigned long lastInitAttempt = 0;
const unsigned long INIT_RETRY_DELAY = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

// =============================================
// –û–ë–™–Ø–í–õ–ï–ù–ò–Ø –§–£–ù–ö–¶–ò–ô
// =============================================

bool initializeI2C();
bool initializePN532WithRetry();
bool initializePN532Single();
void initializeOtherComponents();
void handleInitializationError();
void handleErrorRecovery();
void handlePeriodicTasks();

// =============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´
// =============================================

void setup() {
    Serial.begin(115200);
    delay(1000);
    
    DEBUG_PRINTLN("========================================");
    DEBUG_PRINTLN("RFID Matrix 8√ó12 - –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã v3.1");
    DEBUG_PRINTLN("–ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú (—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–∞–π–º–∏–Ω–≥–∏)");
    DEBUG_PRINTLN("========================================");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    stateManager.initialize();
    stateManager.setState(STATE_INIT);
    
    if (!initializeI2C()) {
        stateManager.setState(STATE_ERROR);
        handleInitializationError();
        return;
    }
    
    if (!initializePN532WithRetry()) {
        stateManager.setState(STATE_ERROR);
        handleInitializationError();
        return;
    }
    
    initializeOtherComponents();
    stateManager.setState(STATE_SCANNING);
    
    DEBUG_PRINTLN("‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ê!");
}

// =============================================
// –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –° STATE MACHINE
// =============================================

void loop() {
    // –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º StateManager –≤ –∫–∞–∂–¥–æ–º —Ü–∏–∫–ª–µ
    stateManager.updateState();
    
    // –î–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    switch (stateManager.getCurrentState()) {
        
        case STATE_INIT:
            // –°–∏—Å—Ç–µ–º–∞ –µ—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –∂–¥–µ–º
            delay(100);
            break;
            
        case STATE_SCANNING:
            // –û–°–ù–û–í–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ PN532 –≥–æ—Ç–æ–≤
            if (rfidManager.getConnected()) {
                scanMatrix.update();
            } else {
                // PN532 –æ—Ç–∫–ª—é—á–∏–ª—Å—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å
                stateManager.setState(STATE_ERROR);
            }
            break;
            
        case STATE_ERROR:
            // –†–µ–∂–∏–º –æ—à–∏–±–∫–∏ - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            handleErrorRecovery();
            break;
            
        case STATE_IDLE:
            // –†–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
            delay(100);
            break;
            
        default:
            stateManager.setState(STATE_ERROR);
            break;
    }
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è)
    handlePeriodicTasks();
    
    delay(10); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
}

// =============================================
// –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø PN532
// =============================================

bool initializePN532WithRetry() {
    for (pn532InitAttempts = 1; pn532InitAttempts <= MAX_INIT_ATTEMPTS; pn532InitAttempts++) {
        if (initializePN532Single()) {
            DEBUG_PRINTF("‚úÖ PN532 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–ø—ã—Ç–∫–∏ #%d\n", pn532InitAttempts);
            return true;
        }
        
        if (pn532InitAttempts < MAX_INIT_ATTEMPTS) {
            delay(INIT_RETRY_DELAY);
        }
    }
    
    DEBUG_PRINTLN("üö® –û–®–ò–ë–ö–ê: PN532 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
    return false;
}

bool initializePN532Single() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PN532 –Ω–∞ I2C —à–∏–Ω–µ
    Wire.beginTransmission(0x24);
    if (Wire.endTransmission() != 0) {
        return false;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RFID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if (!rfidManager.initialize()) {
        return false;
    }
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: PN532 –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç
    delay(200); // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    
    if (!rfidManager.getConnected()) {
        return false;
    }
    
    return true;
}

// =============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–°–¢–ê–õ–¨–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
// =============================================

void initializeOtherComponents() {
    muxManager.initialize();
    scanMatrix.initialize();
    displayManager.initialize();
}

// =============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø I2C (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
// =============================================

bool initializeI2C() {
    Wire.begin(PN532_SDA_PIN, PN532_SCL_PIN);
    Wire.setClock(I2C_FREQUENCY);  // 100kHz –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    
    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ I2C —à–∏–Ω—ã
    Wire.beginTransmission(0x24);
    if (Wire.endTransmission() == 0) {
        DEBUG_PRINTLN("‚úÖ PN532 –Ω–∞–π–¥–µ–Ω –Ω–∞ I2C –∞–¥—Ä–µ—Å–µ 0x24 - I2C —Ä–∞–±–æ—Ç–∞–µ—Ç!");
        return true;
    }
    
    return true;  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, PN532 –ø–æ–ø—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
}

// =============================================
// –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï
// =============================================

void handleInitializationError() {
    DEBUG_PRINTLN("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò!");
    DEBUG_PRINTLN("");
    DEBUG_PRINTLN("üîß –ü–†–û–í–ï–†–¨–¢–ï:");
    DEBUG_PRINTLN("1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è I2C: SDA=GPIO21, SCL=GPIO22");
    DEBUG_PRINTLN("2. –ü–æ–¥—Ç—è–≥–∏–≤–∞—é—â–∏–µ —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã 3.3kŒ© –Ω–∞ SDA/SCL –∫ 3.3V");
    DEBUG_PRINTLN("3. –ü–∏—Ç–∞–Ω–∏–µ PN532: 3.3V –∏–ª–∏ 5V");
    DEBUG_PRINTLN("4. –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ PN532: SW1=ON, SW2=OFF (I2C —Ä–µ–∂–∏–º)");
    DEBUG_PRINTLN("5. –ö–∞—á–µ—Å—Ç–≤–æ –ø–∞–π–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤");
    DEBUG_PRINTLN("");
    DEBUG_PRINTLN("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –æ—à–∏–±–∫–∏...");
}

void handleErrorRecovery() {
    static unsigned long lastRecoveryAttempt = 0;
    
    // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    if (millis() - lastRecoveryAttempt >= 5000) {
        if (rfidManager.reconnect()) {
            DEBUG_PRINTLN("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
            stateManager.setState(STATE_SCANNING);
        }
        
        lastRecoveryAttempt = millis();
    }
}

// =============================================
// –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò
// =============================================

void handlePeriodicTasks() {
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è (—Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥)
    static unsigned long lastDisplay = 0;
    if (millis() - lastDisplay >= 5000) {
        if (stateManager.getCurrentState() != STATE_ERROR) {
            displayManager.printSystemStatus();
        }
        lastDisplay = millis();
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è RFID (—Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥) 
    static unsigned long lastRFIDCheck = 0;
    if (millis() - lastRFIDCheck >= 10000) {
        rfidManager.checkConnection();
        
        // –ï—Å–ª–∏ PN532 –æ—Ç–∫–ª—é—á–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        if (!rfidManager.getConnected() && stateManager.getCurrentState() == STATE_SCANNING) {
            stateManager.setState(STATE_ERROR);
        }
        
        lastRFIDCheck = millis();
    }
}


/* ============================================================================
 * –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–´–ô –ö–û–î –î–õ–Ø –ü–û–õ–ù–û–ô –ú–ê–¢–†–ò–¶–´ 8√ó12 (96 –ê–ù–¢–ï–ù–ù)
 * –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–Ω—Ç–µ–Ω–Ω
 * ============================================================================

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è RFID –¥–∞–Ω–Ω—ã—Ö
struct RFIDCard {
  uint8_t uid[7];
  uint8_t uidLength;
  uint32_t timestamp;
  bool present;
};

// –ú–∞—Ç—Ä–∏—Ü–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π RFID –∫–∞—Ä—Ç  
RFIDCard rfidMatrix[MATRIX_ROWS][MATRIX_COLS];

// –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π loop –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã
void productionLoop() {
  static int currentRow = 0;
  static int currentCol = 0;
  static unsigned long lastScan = 0;
  
  // –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
  if (millis() - lastScan >= SCAN_DELAY_MS) {
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —è—á–µ–π–∫—É
    selectCell(currentRow, currentCol);
    delayMicroseconds(MUX_SETTLE_TIME_US);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å RFID –∫–∞—Ä—Ç—É
    uint8_t uid[7];
    uint8_t uidLength;
    
    if (nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength, RFID_TIMEOUT_MS)) {
      // –ö–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞
      if (!rfidMatrix[currentRow][currentCol].present) {
        // –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–æ—è–≤–∏–ª–∞—Å—å
        memcpy(rfidMatrix[currentRow][currentCol].uid, uid, uidLength);
        rfidMatrix[currentRow][currentCol].uidLength = uidLength;
        rfidMatrix[currentRow][currentCol].timestamp = millis();
        rfidMatrix[currentRow][currentCol].present = true;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è "–∫–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        onCardAdded(currentRow, currentCol, uid, uidLength);
      }
    } else {
      // –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
      if (rfidMatrix[currentRow][currentCol].present) {
        // –ö–∞—Ä—Ç–∞ –±—ã–ª–∞ —É–±—Ä–∞–Ω–∞
        rfidMatrix[currentRow][currentCol].present = false;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è "–∫–∞—Ä—Ç–∞ —É–±—Ä–∞–Ω–∞"  
        onCardRemoved(currentRow, currentCol);
      }
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —è—á–µ–π–∫–µ
    currentCol++;
    if (currentCol >= MATRIX_COLS) {
      currentCol = 0;
      currentRow++;
      if (currentRow >= MATRIX_ROWS) {
        currentRow = 0;
        // –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω
        onScanCycleComplete();
      }
    }
    
    lastScan = millis();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥ –∑–∞–¥–∞—á—É)
void onCardAdded(int row, int col, uint8_t* uid, uint8_t uidLength) {
  // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã
  Serial.printf("–ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ [%d,%d]: ", row, col);
  for (int i = 0; i < uidLength; i++) {
    Serial.printf("%02X ", uid[i]);
  }
  Serial.println();
}

void onCardRemoved(int row, int col) {
  // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã
  Serial.printf("–ö–∞—Ä—Ç–∞ —É–±—Ä–∞–Ω–∞ [%d,%d]\n", row, col);
}

void onScanCycleComplete() {
  // –ü–æ–ª–Ω—ã–π —Å–∫–∞–Ω –º–∞—Ç—Ä–∏—Ü—ã –∑–∞–≤–µ—Ä—à–µ–Ω (–∫–∞–∂–¥—ã–µ ~3.8 —Å–µ–∫)
  // –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ —Ç.–¥.
}

// –ü–µ—á–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã
void printMatrixState() {
  Serial.println("\n=== –°–û–°–¢–û–Ø–ù–ò–ï –ú–ê–¢–†–ò–¶–´ 8√ó12 ===");
  Serial.println("   0 1 2 3 4 5 6 7 8 9 A B");
  
  for (int row = MATRIX_ROWS - 1; row >= 0; row--) {
    Serial.printf("%X  ", row);
    for (int col = 0; col < MATRIX_COLS; col++) {
      Serial.print(rfidMatrix[row][col].present ? "‚ñà " : "¬∑ ");
    }
    Serial.printf(" %X\n", row);
  }
  Serial.println("   0 1 2 3 4 5 6 7 8 9 A B");
  Serial.println("===============================");
}

============================================================================ */ 